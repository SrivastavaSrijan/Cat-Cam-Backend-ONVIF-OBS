#!/bin/bash

# MJPEG Service Manager - One script to rule them all
# Usage: ./mjpeg [start|stop|restart|status|logs]

SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
VENV_PATH="$SCRIPT_DIR/venv"
SUPERVISOR_CONF="$SCRIPT_DIR/supervisord.conf"

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

log() {
    echo -e "${BLUE}[MJPEG]${NC} $1"
}

success() {
    echo -e "${GREEN}✅${NC} $1"
}

warning() {
    echo -e "${YELLOW}⚠️${NC} $1"
}

error() {
    echo -e "${RED}❌${NC} $1"
}

# Check if we're in the right directory
check_environment() {
    if [[ ! -f "$SUPERVISOR_CONF" ]]; then
        error "supervisord.conf not found. Run this script from the mjpeg directory."
        exit 1
    fi
    
    cd "$SCRIPT_DIR"
    
    # Check for problematic Launch Agents
    if [[ -f ~/Library/LaunchAgents/com.ssvcam.mjpeg.plist ]]; then
        warning "Found macOS Launch Agent that could interfere with service"
        warning "Run: launchctl unload ~/Library/LaunchAgents/com.ssvcam.mjpeg.plist"
        warning "Then: rm ~/Library/LaunchAgents/com.ssvcam.mjpeg.plist"
    fi
    
    # Create/activate venv if needed
    if [[ ! -d "$VENV_PATH" ]]; then
        log "Creating virtual environment..."
        python3 -m venv venv
    fi
    
    source venv/bin/activate
    
    # Install requirements if needed
    if [[ ! -f "$VENV_PATH/installed.flag" ]]; then
        log "Installing requirements..."
        pip install -q -r requirements.txt
        touch "$VENV_PATH/installed.flag"
    fi
}

# Clean up only our supervisor processes (no port killing)
cleanup_supervisors() {
    log "Cleaning up supervisor processes..."
    
    # Only target our specific supervisor instance
    SUPERVISOR_PIDS=$(pgrep -f "supervisord.*supervisord.conf" 2>/dev/null || true)
    if [[ -n "$SUPERVISOR_PIDS" ]]; then
        warning "Found supervisor processes: $SUPERVISOR_PIDS"
        
        # Try graceful shutdown first
        supervisorctl -c supervisord.conf shutdown 2>/dev/null || true
        sleep 2
        
        # Check if any are still running
        REMAINING_PIDS=$(pgrep -f "supervisord.*supervisord.conf" 2>/dev/null || true)
        if [[ -n "$REMAINING_PIDS" ]]; then
            warning "Force stopping remaining supervisor processes: $REMAINING_PIDS"
            for pid in $REMAINING_PIDS; do
                kill -TERM "$pid" 2>/dev/null || true
            done
        fi
    fi
    
    # Clean up only our temp files
    rm -f /tmp/supervisor.sock /tmp/supervisord.pid /tmp/mjpeg_*.log
    
    success "Cleanup complete"
}

# Check service status
check_status() {
    if curl -s -m 2 http://localhost:8080/health 2>/dev/null | grep -q "mjpeg-streaming"; then
        return 0
    else
        return 1
    fi
}

# Check if supervisor is running
supervisor_running() {
    if [[ -f "/tmp/supervisord.pid" ]]; then
        local pid=$(cat /tmp/supervisord.pid 2>/dev/null)
        if [[ -n "$pid" ]] && kill -0 "$pid" 2>/dev/null; then
            return 0
        fi
    fi
    return 1
}

# Start the service
start_service() {
    log "Starting MJPEG service..."
    
    # Check if already running
    if check_status; then
        success "Service is already running at http://localhost:8080"
        return 0
    fi
    
    # Setup environment
    check_environment
    
    # Only clean up if supervisor is actually running
    if pgrep -f "supervisord.*supervisord.conf" >/dev/null 2>&1; then
        log "Stopping existing supervisor..."
        cleanup_supervisors
    fi
    
    log "Starting supervisor..."
    supervisord -c supervisord.conf
    
    # Wait for service to start
    local attempts=0
    while [[ $attempts -lt 15 ]]; do
        if check_status; then
            success "Service started successfully!"
            success "🌐 Service: http://localhost:8080"
            success "🎥 Stream: http://localhost:8080/stream"
            return 0
        fi
        sleep 2
        ((attempts++))
    done
    
    error "Service failed to start"
    log "Check logs with: ./mjpeg logs"
    return 1
}

# Stop the service
stop_service() {
    log "Stopping MJPEG service..."
    
    if ! check_status; then
        success "Service is not running"
        return 0
    fi
    
    check_environment
    supervisorctl -c supervisord.conf stop mjpeg_stream 2>/dev/null || true
    supervisorctl -c supervisord.conf shutdown 2>/dev/null || true
    
    # Wait for service to stop
    local attempts=0
    while [[ $attempts -lt 5 ]]; do
        if ! check_status; then
            success "Service stopped successfully"
            return 0
        fi
        sleep 1
        ((attempts++))
    done
    
    warning "Service didn't stop gracefully, cleaning up..."
    cleanup_supervisors
    success "Service stopped"
}

# Show service status
show_status() {
    echo "MJPEG Service Status"
    echo "==================="
    
    if check_status; then
        success "Service: Running"
        echo "🌐 URL: http://localhost:8080"
        echo "🎥 Stream: http://localhost:8080/stream"
        
        check_environment
        echo ""
        echo "Supervisor Status:"
        if supervisor_running; then
            success "Supervisor: Running (PID: $(cat /tmp/supervisord.pid 2>/dev/null || echo 'unknown'))"
            supervisorctl -c supervisord.conf status 2>/dev/null || warning "Cannot connect to supervisor"
        else
            warning "Supervisor: Not running (service may be running outside supervisor)"
        fi
    else
        error "Service: Not running"
        if supervisor_running; then
            warning "Supervisor is running but service is not responding"
        fi
    fi
    
    echo ""
    echo "Port 8080 Status:"
    if netstat -anp tcp | grep ":8080 " | grep -q LISTEN; then
        echo "🔴 Port 8080 is in use"
        # Only show what's using it, don't list Docker processes
        netstat -anp tcp | grep ":8080 " | grep LISTEN | head -3
    else
        echo "✅ Port 8080 is available"
    fi
}

# Show logs
show_logs() {
    check_environment
    if [[ -f "/tmp/mjpeg_stdout.log" ]]; then
        echo "=== STDOUT LOGS ==="
        tail -20 /tmp/mjpeg_stdout.log
    fi
    
    if [[ -f "/tmp/mjpeg_stderr.log" ]]; then
        echo "=== STDERR LOGS ==="
        tail -20 /tmp/mjpeg_stderr.log
    fi
    
    echo ""
    echo "To follow logs: tail -f /tmp/mjpeg_stdout.log /tmp/mjpeg_stderr.log"
}

# Main command handling
case "${1:-help}" in
    start)
        start_service
        ;;
    stop)
        stop_service
        ;;
    restart)
        stop_service
        sleep 2
        start_service
        ;;
    status)
        show_status
        ;;
    logs)
        show_logs
        ;;
    cleanup)
        cleanup_supervisors
        ;;
    help|*)
        echo "MJPEG Service Manager"
        echo "===================="
        echo "Usage: $0 {start|stop|restart|status|logs|cleanup}"
        echo ""
        echo "Commands:"
        echo "  start    - Start the MJPEG service"
        echo "  stop     - Stop the MJPEG service"
        echo "  restart  - Restart the MJPEG service"
        echo "  status   - Show service status"
        echo "  logs     - Show recent logs"
        echo "  cleanup  - Clean up stale processes"
        echo ""
        exit 0
        ;;
esac
